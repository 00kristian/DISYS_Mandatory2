// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TokenRingClient is the client API for TokenRing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokenRingClient interface {
	PassToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Empty, error)
	RecieveToken(ctx context.Context, in *Empty, opts ...grpc.CallOption) (TokenRing_RecieveTokenClient, error)
}

type tokenRingClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenRingClient(cc grpc.ClientConnInterface) TokenRingClient {
	return &tokenRingClient{cc}
}

func (c *tokenRingClient) PassToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.TokenRing/passToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenRingClient) RecieveToken(ctx context.Context, in *Empty, opts ...grpc.CallOption) (TokenRing_RecieveTokenClient, error) {
	stream, err := c.cc.NewStream(ctx, &TokenRing_ServiceDesc.Streams[0], "/proto.TokenRing/recieveToken", opts...)
	if err != nil {
		return nil, err
	}
	x := &tokenRingRecieveTokenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TokenRing_RecieveTokenClient interface {
	Recv() (*Token, error)
	grpc.ClientStream
}

type tokenRingRecieveTokenClient struct {
	grpc.ClientStream
}

func (x *tokenRingRecieveTokenClient) Recv() (*Token, error) {
	m := new(Token)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TokenRingServer is the server API for TokenRing service.
// All implementations must embed UnimplementedTokenRingServer
// for forward compatibility
type TokenRingServer interface {
	PassToken(context.Context, *Token) (*Empty, error)
	RecieveToken(*Empty, TokenRing_RecieveTokenServer) error
	mustEmbedUnimplementedTokenRingServer()
}

// UnimplementedTokenRingServer must be embedded to have forward compatible implementations.
type UnimplementedTokenRingServer struct {
}

func (UnimplementedTokenRingServer) PassToken(context.Context, *Token) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PassToken not implemented")
}
func (UnimplementedTokenRingServer) RecieveToken(*Empty, TokenRing_RecieveTokenServer) error {
	return status.Errorf(codes.Unimplemented, "method RecieveToken not implemented")
}
func (UnimplementedTokenRingServer) mustEmbedUnimplementedTokenRingServer() {}

// UnsafeTokenRingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenRingServer will
// result in compilation errors.
type UnsafeTokenRingServer interface {
	mustEmbedUnimplementedTokenRingServer()
}

func RegisterTokenRingServer(s grpc.ServiceRegistrar, srv TokenRingServer) {
	s.RegisterService(&TokenRing_ServiceDesc, srv)
}

func _TokenRing_PassToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenRingServer).PassToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TokenRing/passToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenRingServer).PassToken(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenRing_RecieveToken_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TokenRingServer).RecieveToken(m, &tokenRingRecieveTokenServer{stream})
}

type TokenRing_RecieveTokenServer interface {
	Send(*Token) error
	grpc.ServerStream
}

type tokenRingRecieveTokenServer struct {
	grpc.ServerStream
}

func (x *tokenRingRecieveTokenServer) Send(m *Token) error {
	return x.ServerStream.SendMsg(m)
}

// TokenRing_ServiceDesc is the grpc.ServiceDesc for TokenRing service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TokenRing_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TokenRing",
	HandlerType: (*TokenRingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "passToken",
			Handler:    _TokenRing_PassToken_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "recieveToken",
			Handler:       _TokenRing_RecieveToken_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/proto.proto",
}
